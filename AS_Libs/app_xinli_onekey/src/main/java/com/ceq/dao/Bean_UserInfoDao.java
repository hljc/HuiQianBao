package com.ceq.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.ceq.app.core.bean.Bean_Properties;
import com.ceq.app.core.bean.Bean_UserInfo;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.internal.SqlUtils;

import java.util.ArrayList;
import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "BEAN__USER_INFO".
*/
public class Bean_UserInfoDao extends AbstractDao<Bean_UserInfo, String> {

    public static final String TABLENAME = "BEAN__USER_INFO";

    /**
     * Properties of entity Bean_UserInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Pid = new Property(1, long.class, "pid", false, "PID");
        public final static Property ModifyDate = new Property(2, long.class, "modifyDate", false, "MODIFY_DATE");
        public final static Property Token = new Property(3, String.class, "token", false, "TOKEN");
        public final static Property Phone = new Property(4, String.class, "phone", false, "PHONE");
        public final static Property Password = new Property(5, String.class, "password", false, "PASSWORD");
        public final static Property Paypass = new Property(6, String.class, "paypass", false, "PAYPASS");
        public final static Property NickName = new Property(7, String.class, "nickName", false, "NICK_NAME");
        public final static Property Fullname = new Property(8, String.class, "fullname", false, "FULLNAME");
        public final static Property Origcode = new Property(9, String.class, "origcode", false, "ORIGCODE");
        public final static Property Signcode = new Property(10, String.class, "signcode", false, "SIGNCODE");
        public final static Property Address = new Property(11, String.class, "address", false, "ADDRESS");
        public final static Property Contactname = new Property(12, String.class, "contactname", false, "CONTACTNAME");
        public final static Property Zipcode = new Property(13, String.class, "zipcode", false, "ZIPCODE");
        public final static Property UserHeadUrl = new Property(14, String.class, "userHeadUrl", false, "USER_HEAD_URL");
        public final static Property Province = new Property(15, String.class, "province", false, "PROVINCE");
        public final static Property City = new Property(16, String.class, "city", false, "CITY");
        public final static Property Email = new Property(17, String.class, "email", false, "EMAIL");
        public final static Property Sex = new Property(18, String.class, "sex", false, "SEX");
        public final static Property Profession = new Property(19, String.class, "profession", false, "PROFESSION");
        public final static Property Birthday = new Property(20, String.class, "birthday", false, "BIRTHDAY");
        public final static Property Openid = new Property(21, String.class, "openid", false, "OPENID");
        public final static Property Unionid = new Property(22, String.class, "unionid", false, "UNIONID");
        public final static Property UserToken = new Property(23, String.class, "userToken", false, "USER_TOKEN");
        public final static Property ValidStatus = new Property(24, String.class, "validStatus", false, "VALID_STATUS");
        public final static Property CreateTime = new Property(25, String.class, "createTime", false, "CREATE_TIME");
        public final static Property InviteCode = new Property(26, String.class, "inviteCode", false, "INVITE_CODE");
        public final static Property BrandId = new Property(27, String.class, "brandId", false, "BRAND_ID");
        public final static Property Brandname = new Property(28, String.class, "brandname", false, "BRANDNAME");
        public final static Property Grade = new Property(29, String.class, "grade", false, "GRADE");
        public final static Property PreUserId = new Property(30, String.class, "preUserId", false, "PRE_USER_ID");
        public final static Property PreUserPhone = new Property(31, String.class, "preUserPhone", false, "PRE_USER_PHONE");
        public final static Property RealnameStatus = new Property(32, String.class, "realnameStatus", false, "REALNAME_STATUS");
    }

    private DaoSession daoSession;


    public Bean_UserInfoDao(DaoConfig config) {
        super(config);
    }
    
    public Bean_UserInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BEAN__USER_INFO\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"PID\" INTEGER NOT NULL ," + // 1: pid
                "\"MODIFY_DATE\" INTEGER NOT NULL ," + // 2: modifyDate
                "\"TOKEN\" TEXT," + // 3: token
                "\"PHONE\" TEXT," + // 4: phone
                "\"PASSWORD\" TEXT," + // 5: password
                "\"PAYPASS\" TEXT," + // 6: paypass
                "\"NICK_NAME\" TEXT," + // 7: nickName
                "\"FULLNAME\" TEXT," + // 8: fullname
                "\"ORIGCODE\" TEXT," + // 9: origcode
                "\"SIGNCODE\" TEXT," + // 10: signcode
                "\"ADDRESS\" TEXT," + // 11: address
                "\"CONTACTNAME\" TEXT," + // 12: contactname
                "\"ZIPCODE\" TEXT," + // 13: zipcode
                "\"USER_HEAD_URL\" TEXT," + // 14: userHeadUrl
                "\"PROVINCE\" TEXT," + // 15: province
                "\"CITY\" TEXT," + // 16: city
                "\"EMAIL\" TEXT," + // 17: email
                "\"SEX\" TEXT," + // 18: sex
                "\"PROFESSION\" TEXT," + // 19: profession
                "\"BIRTHDAY\" TEXT," + // 20: birthday
                "\"OPENID\" TEXT," + // 21: openid
                "\"UNIONID\" TEXT," + // 22: unionid
                "\"USER_TOKEN\" TEXT," + // 23: userToken
                "\"VALID_STATUS\" TEXT," + // 24: validStatus
                "\"CREATE_TIME\" TEXT," + // 25: createTime
                "\"INVITE_CODE\" TEXT," + // 26: inviteCode
                "\"BRAND_ID\" TEXT," + // 27: brandId
                "\"BRANDNAME\" TEXT," + // 28: brandname
                "\"GRADE\" TEXT," + // 29: grade
                "\"PRE_USER_ID\" TEXT," + // 30: preUserId
                "\"PRE_USER_PHONE\" TEXT," + // 31: preUserPhone
                "\"REALNAME_STATUS\" TEXT);"); // 32: realnameStatus
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BEAN__USER_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Bean_UserInfo entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
        stmt.bindLong(2, entity.getPid());
        stmt.bindLong(3, entity.getModifyDate());
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(4, token);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(5, phone);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(6, password);
        }
 
        String paypass = entity.getPaypass();
        if (paypass != null) {
            stmt.bindString(7, paypass);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(8, nickName);
        }
 
        String fullname = entity.getFullname();
        if (fullname != null) {
            stmt.bindString(9, fullname);
        }
 
        String origcode = entity.getOrigcode();
        if (origcode != null) {
            stmt.bindString(10, origcode);
        }
 
        String signcode = entity.getSigncode();
        if (signcode != null) {
            stmt.bindString(11, signcode);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(12, address);
        }
 
        String contactname = entity.getContactname();
        if (contactname != null) {
            stmt.bindString(13, contactname);
        }
 
        String zipcode = entity.getZipcode();
        if (zipcode != null) {
            stmt.bindString(14, zipcode);
        }
 
        String userHeadUrl = entity.getUserHeadUrl();
        if (userHeadUrl != null) {
            stmt.bindString(15, userHeadUrl);
        }
 
        String province = entity.getProvince();
        if (province != null) {
            stmt.bindString(16, province);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(17, city);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(18, email);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(19, sex);
        }
 
        String profession = entity.getProfession();
        if (profession != null) {
            stmt.bindString(20, profession);
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(21, birthday);
        }
 
        String openid = entity.getOpenid();
        if (openid != null) {
            stmt.bindString(22, openid);
        }
 
        String unionid = entity.getUnionid();
        if (unionid != null) {
            stmt.bindString(23, unionid);
        }
 
        String userToken = entity.getUserToken();
        if (userToken != null) {
            stmt.bindString(24, userToken);
        }
 
        String validStatus = entity.getValidStatus();
        if (validStatus != null) {
            stmt.bindString(25, validStatus);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(26, createTime);
        }
 
        String inviteCode = entity.getInviteCode();
        if (inviteCode != null) {
            stmt.bindString(27, inviteCode);
        }
 
        String brandId = entity.getBrandId();
        if (brandId != null) {
            stmt.bindString(28, brandId);
        }
 
        String brandname = entity.getBrandname();
        if (brandname != null) {
            stmt.bindString(29, brandname);
        }
 
        String grade = entity.getGrade();
        if (grade != null) {
            stmt.bindString(30, grade);
        }
 
        String preUserId = entity.getPreUserId();
        if (preUserId != null) {
            stmt.bindString(31, preUserId);
        }
 
        String preUserPhone = entity.getPreUserPhone();
        if (preUserPhone != null) {
            stmt.bindString(32, preUserPhone);
        }
 
        String realnameStatus = entity.getRealnameStatus();
        if (realnameStatus != null) {
            stmt.bindString(33, realnameStatus);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Bean_UserInfo entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
        stmt.bindLong(2, entity.getPid());
        stmt.bindLong(3, entity.getModifyDate());
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(4, token);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(5, phone);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(6, password);
        }
 
        String paypass = entity.getPaypass();
        if (paypass != null) {
            stmt.bindString(7, paypass);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(8, nickName);
        }
 
        String fullname = entity.getFullname();
        if (fullname != null) {
            stmt.bindString(9, fullname);
        }
 
        String origcode = entity.getOrigcode();
        if (origcode != null) {
            stmt.bindString(10, origcode);
        }
 
        String signcode = entity.getSigncode();
        if (signcode != null) {
            stmt.bindString(11, signcode);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(12, address);
        }
 
        String contactname = entity.getContactname();
        if (contactname != null) {
            stmt.bindString(13, contactname);
        }
 
        String zipcode = entity.getZipcode();
        if (zipcode != null) {
            stmt.bindString(14, zipcode);
        }
 
        String userHeadUrl = entity.getUserHeadUrl();
        if (userHeadUrl != null) {
            stmt.bindString(15, userHeadUrl);
        }
 
        String province = entity.getProvince();
        if (province != null) {
            stmt.bindString(16, province);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(17, city);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(18, email);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(19, sex);
        }
 
        String profession = entity.getProfession();
        if (profession != null) {
            stmt.bindString(20, profession);
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(21, birthday);
        }
 
        String openid = entity.getOpenid();
        if (openid != null) {
            stmt.bindString(22, openid);
        }
 
        String unionid = entity.getUnionid();
        if (unionid != null) {
            stmt.bindString(23, unionid);
        }
 
        String userToken = entity.getUserToken();
        if (userToken != null) {
            stmt.bindString(24, userToken);
        }
 
        String validStatus = entity.getValidStatus();
        if (validStatus != null) {
            stmt.bindString(25, validStatus);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(26, createTime);
        }
 
        String inviteCode = entity.getInviteCode();
        if (inviteCode != null) {
            stmt.bindString(27, inviteCode);
        }
 
        String brandId = entity.getBrandId();
        if (brandId != null) {
            stmt.bindString(28, brandId);
        }
 
        String brandname = entity.getBrandname();
        if (brandname != null) {
            stmt.bindString(29, brandname);
        }
 
        String grade = entity.getGrade();
        if (grade != null) {
            stmt.bindString(30, grade);
        }
 
        String preUserId = entity.getPreUserId();
        if (preUserId != null) {
            stmt.bindString(31, preUserId);
        }
 
        String preUserPhone = entity.getPreUserPhone();
        if (preUserPhone != null) {
            stmt.bindString(32, preUserPhone);
        }
 
        String realnameStatus = entity.getRealnameStatus();
        if (realnameStatus != null) {
            stmt.bindString(33, realnameStatus);
        }
    }

    @Override
    protected final void attachEntity(Bean_UserInfo entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Bean_UserInfo readEntity(Cursor cursor, int offset) {
        Bean_UserInfo entity = new Bean_UserInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.getLong(offset + 1), // pid
            cursor.getLong(offset + 2), // modifyDate
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // token
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // phone
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // password
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // paypass
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // nickName
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // fullname
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // origcode
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // signcode
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // address
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // contactname
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // zipcode
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // userHeadUrl
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // province
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // city
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // email
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // sex
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // profession
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // birthday
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // openid
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // unionid
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // userToken
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // validStatus
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // createTime
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // inviteCode
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // brandId
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // brandname
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // grade
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // preUserId
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // preUserPhone
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32) // realnameStatus
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Bean_UserInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPid(cursor.getLong(offset + 1));
        entity.setModifyDate(cursor.getLong(offset + 2));
        entity.setToken(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPhone(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPassword(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPaypass(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setNickName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFullname(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setOrigcode(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setSigncode(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setAddress(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setContactname(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setZipcode(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setUserHeadUrl(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setProvince(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setCity(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setEmail(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setSex(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setProfession(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setBirthday(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setOpenid(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setUnionid(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setUserToken(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setValidStatus(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setCreateTime(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setInviteCode(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setBrandId(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setBrandname(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setGrade(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setPreUserId(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setPreUserPhone(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setRealnameStatus(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Bean_UserInfo entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(Bean_UserInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Bean_UserInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getBean_PropertiesDao().getAllColumns());
            builder.append(" FROM BEAN__USER_INFO T");
            builder.append(" LEFT JOIN BEAN__PROPERTIES T0 ON T.\"PID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Bean_UserInfo loadCurrentDeep(Cursor cursor, boolean lock) {
        Bean_UserInfo entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Bean_Properties bean_properties = loadCurrentOther(daoSession.getBean_PropertiesDao(), cursor, offset);
         if(bean_properties != null) {
            entity.setBean_properties(bean_properties);
        }

        return entity;    
    }

    public Bean_UserInfo loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Bean_UserInfo> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Bean_UserInfo> list = new ArrayList<Bean_UserInfo>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Bean_UserInfo> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Bean_UserInfo> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
