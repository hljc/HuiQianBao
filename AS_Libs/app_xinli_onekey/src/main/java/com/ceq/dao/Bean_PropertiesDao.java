package com.ceq.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.ceq.app.core.bean.Bean_Properties;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "BEAN__PROPERTIES".
*/
public class Bean_PropertiesDao extends AbstractDao<Bean_Properties, Long> {

    public static final String TABLENAME = "BEAN__PROPERTIES";

    /**
     * Properties of entity Bean_Properties.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Pid = new Property(0, long.class, "pid", true, "_id");
        public final static Property RememberPassword = new Property(1, boolean.class, "rememberPassword", false, "REMEMBER_PASSWORD");
    }


    public Bean_PropertiesDao(DaoConfig config) {
        super(config);
    }
    
    public Bean_PropertiesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BEAN__PROPERTIES\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: pid
                "\"REMEMBER_PASSWORD\" INTEGER NOT NULL );"); // 1: rememberPassword
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BEAN__PROPERTIES\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Bean_Properties entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getPid());
        stmt.bindLong(2, entity.getRememberPassword() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Bean_Properties entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getPid());
        stmt.bindLong(2, entity.getRememberPassword() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Bean_Properties readEntity(Cursor cursor, int offset) {
        Bean_Properties entity = new Bean_Properties( //
            cursor.getLong(offset + 0), // pid
            cursor.getShort(offset + 1) != 0 // rememberPassword
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Bean_Properties entity, int offset) {
        entity.setPid(cursor.getLong(offset + 0));
        entity.setRememberPassword(cursor.getShort(offset + 1) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Bean_Properties entity, long rowId) {
        entity.setPid(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Bean_Properties entity) {
        if(entity != null) {
            return entity.getPid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Bean_Properties entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
